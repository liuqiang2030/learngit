package {	import fl.controls.CheckBox;	import fl.controls.RadioButton;	import fl.controls.Button;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	public class Deal extends Sprite	{		internal var checks:Array=[];		internal var cars:Array=[];		internal var carDeal:Auto;		public var dealText:TextField=new TextField();		//Constructor Function		public function Deal ():void		{			getRadios ();			getChecks ();			doDealButton ();			showDeal ();		}		//Add button from Library		private function doDealButton ():void		{			var doDeal:Button=new Button();			this.addChild (doDeal);			doDeal.x=215;			doDeal.y=195;			doDeal.label="Make Deal";			doDeal.addEventListener (MouseEvent.CLICK,getPackage);		}		//**		//Get information from Decorator and display it		//**		private function getPackage (e:MouseEvent):void		{			getCar ();			getOptions ();			if (carDeal == null)			{				return;			}			else			{				var nowDrive:String=carDeal.getInformation()+"\nTotal= $"+carDeal.price();			}			dealText.text=formatMachine(nowDrive);		}		//Format Output		private function formatMachine (format:String):String		{			if (format.indexOf("~") != -1)			{				format=format.split("~").join("\n");			}			return format;		}		//Text Field & Format		private function showDeal ():void		{			dealText.width=150;			dealText.height=100;			dealText.wordWrap=true;			dealText.multiline=true;			dealText.x=165;			dealText.y=230;			dealText.border=true;			dealText.borderColor=0xcc0000;			var dealerFormat:TextFormat=new TextFormat();			dealerFormat.leftMargin=4;			dealerFormat.rightMargin=4;			dealText.defaultTextFormat=dealerFormat;			this.addChild (dealText);		}		//Add Check boxes for Options (Concrete Decorators)		private function getChecks ():void		{			var gizmos:Array=new Array("MP3","Heated Seats","GPS", "Rear View Video");			var saloon:uint=gizmos.length;			var giz:uint;			for (giz=0; giz<saloon; giz++)			{				checks[giz]=new CheckBox();				this.addChild (checks[giz]);				checks[giz].width=150;				checks[giz].x=250;				checks[giz].y=80+(giz*30);				checks[giz].label=gizmos[giz];			}		}		//Add Radio buttons Auto (Concrete Components)		private function getRadios ():void		{			var car:Array=new Array("Escape","Mariner","Prius","Accord");			var saloon:uint=car.length;			var ride:uint;			for (ride=0; ride<saloon; ride++)			{				cars[ride]=new RadioButton();				cars[ride].groupName="deals";				this.addChild (cars[ride]);				cars[ride].x=150;				cars[ride].y=80+(ride*30);				cars[ride].label=car[ride];			}		}		//Select Auto and create Concrete Component		private function getCar ():void		{			var tracker:String;			var hybrid:uint;			for (hybrid=0; hybrid<cars.length; hybrid++)			{				if (cars[hybrid].selected)				{					tracker=cars[hybrid].label;					switch (tracker)					{						case "Escape" :							carDeal = new Escape();							break;						case "Mariner" :							carDeal = new Mariner();							break;						case "Prius" :							carDeal = new Prius();							break;						case "Accord" :							carDeal = new Accord();							break;					}				}			}		}		//Select options -- wrap Concrete Component in Decorator		private function getOptions ():void		{			var tracker:String;			var toy:uint;			for (toy=0; toy<checks.length; toy++)			{				if (checks[toy].selected)				{					tracker=checks[toy].label;					switch (tracker)					{						case "MP3" :							carDeal = new MP3(carDeal);							break;						case "Heated Seats" :							carDeal = new HeatedSeats(carDeal);							break;						case "GPS" :							carDeal = new GPS(carDeal);							break;						case "Rear View Video" :							carDeal = new RearViewVideo(carDeal);					}				}			}		}	}}