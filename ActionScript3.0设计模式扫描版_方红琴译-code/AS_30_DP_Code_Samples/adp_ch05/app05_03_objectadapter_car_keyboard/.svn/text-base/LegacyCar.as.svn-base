package {		import flash.display.*;	import flash.events.*;	import flash.geom.*;		public class LegacyCar extends Sprite {				internal var nSpeed:Number; // holds speed of car in pixels/frame		internal var nSteeringWheelAngle:Number; // steering wheel rotation in Degrees				public function LegacyCar(xLoc:int, yLoc:int) {			nSpeed = 5;			nSteeringWheelAngle = 0;			this.drawCar();			this.setLoc(xLoc, yLoc);		}				private function drawCar():void {			// draw car body			graphics.beginFill(0x00FF00); // green color			graphics.drawRect(-20, -10, 40, 20);			graphics.endFill();			// draw tires			drawTire(-12, -15);			drawTire(12, -15);			drawTire(-12, 15);			drawTire(12, 15);		}				private function drawTire(xLoc:int, yLoc:int) {			graphics.beginFill(0x000000); // black color			graphics.drawRect(xLoc - 4, yLoc - 2, 8, 4);			graphics.endFill();		}				// method to set the x and y location of the sprite		private function setLoc(xLoc:int, yLoc:int):void {			this.x = xLoc;			this.y = yLoc;		}				// method to attach event handlers and get the car moving		public function start():void {			if (this.stage) {				// attach EnterFrame event handler doMoveCar()				this.addEventListener(Event.ENTER_FRAME, this.doMoveCar);			} else {				throw new Error("Add car to display list first")			}		}				// method to set the steering wheel angle (in Degrees)		public function setSteeringWheelAngle(nAngle:int):void {			nSteeringWheelAngle = nAngle;		}				// move the car 		private function doMoveCar(event:Event):void {			this.rotation += nSteeringWheelAngle * 0.01; // rotate sprite			trace(nSteeringWheelAngle);			var newLocOffset:Point = Point.polar(nSpeed, this.rotation * Math.PI / 180);			this.x += newLocOffset.x; // move by the x offset			this.y += newLocOffset.y; // move by the y offset			// place Sprite in center of stage if it goes off screen			if ((this.y < 0) || (this.y > this.stage.stageHeight) ||				((this.x < 0)) || (this.x > this.stage.stageWidth)){				this.setLoc(this.stage.stageWidth * 0.5, this.stage.stageHeight * 0.5);			}		}	}}