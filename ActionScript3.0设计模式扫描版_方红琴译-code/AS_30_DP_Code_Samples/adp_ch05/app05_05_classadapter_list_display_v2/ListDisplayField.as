package {		import flash.text.*;	// Adapter	public class ListDisplayField extends TextField implements IListDisplay {				private var aList:Array;				public function ListDisplayField() {			super(); // Call the TextField constructor			this.clear();		}				public function addItem(s:String):void {			this.aList.push(s);			this.update();		}				public function deleteItemAt(i:uint):Boolean {			if ((i > 0) && (i <= aList.length)) {				aList.splice(i-1, 1);				this.update();				return true;			} else {				return false;			}		}				public function clear():void {			aList = [];			this.update();		}				internal function update() {			var listText:String = "";			// split the array to create a string separated by returns			for (var i:Number = 0; i < aList.length; i++) {				listText += aList[i] + "\r";			}			super.text = listText; 		}				// prevent direct setting of text property		override public function set text(s:String):void {			throw new Error("Cannot directly set text property - use addItem() method");		}				// prevent direct setting of htmlText property		override public function set htmlText(s:String):void {			throw new Error("Cannot directly set htmlText property");		}				// prevent appending text		override public function appendText(s:String):void {			throw new Error("Cannot append text - use addItem() method");		}				// prevent replacing selected text		override public function replaceSelectedText(s:String):void {			throw new Error("Cannot replace selected text");		}				// prevent replacing text		override public function replaceText(beginIndex:int, endIndex:int, newText:String):void {			throw new Error("Cannot replace text");		}	}}