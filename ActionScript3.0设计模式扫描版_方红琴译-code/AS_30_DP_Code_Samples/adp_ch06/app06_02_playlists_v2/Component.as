package {		import flash.errors.IllegalOperationError;		// ABSTRACT Class (should be subclassed and not instantiated)	public class Component {				protected var cParent:Component = null;				public function add(c:Component):void {			throw new IllegalOperationError("add operation not supported");		}				public function remove(c:Component):void {			throw new IllegalOperationError("remove operation not supported");		}				public function getChild(n:int):Component { 			throw new IllegalOperationError("getChild operation not supported");			return null;		}				// ABSTRACT Method (must be overridden in a subclass)		public function play():void {		}				internal function setParent(cParent):void {  // no type to allow extension			this.cParent = cParent;		}				public function getParent() { // no type to allow extension			return this.cParent;		}				internal function getComposite() {  // no type to allow extension			return null;		}				internal function removeParentRef():void { 			this.cParent = null;		}			}}