package {		public class Playlist extends Component {			private var sName:String;		protected var aChildren:Array;				public function Playlist(sName:String) {			this.sName = sName;			this.aChildren = new Array();		}				override public function add(c:Component):void {			aChildren.push(c);			c.setParent(this);		}				override public function play():void {			trace("Queuing playlist: " + this.sName);			for each (var c:Component in aChildren) {				c.play();			}		}				override public function getChild(n:int):Component { 			if ((n > 0) && (n <= aChildren.length)) {				return aChildren[n-1];			} else {				return null;			}		}				override internal function getComposite() { 			return this;		}				override public function remove(c:Component):void {			function safeRemove(comp) {				if (comp.getComposite()) {					comp.remove(comp); // composite				} else {					comp.removeParentRef();				}			}			if (c === this) {				// remove all my children				for (var i:int = 0; i < aChildren.length; i++) {					safeRemove(aChildren[i]);				}				this.aChildren = []; // remove references to children				this.removeParentRef(); // remove my parent reference			} else {				for (var j:int = 0; j < aChildren.length; j++) {					if (aChildren[j] == c) {						safeRemove(aChildren[j]); // remove child						aChildren.splice(j, 1); // remove reference					}				}			}		}	}}