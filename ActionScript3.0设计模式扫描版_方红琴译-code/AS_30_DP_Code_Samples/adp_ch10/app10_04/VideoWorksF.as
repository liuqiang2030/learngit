package {	import flash.net.NetConnection;	import flash.net.NetStream;//State Interface #1interface State{	function startPlay(ns:NetStream, flv:String):void;	function startRecord(ns:NetStream, flv:String):void;	function startAppend(ns:NetStream, flv:String):void;	function stopAll(ns:NetStream):void;	function doPause(ns:NetStream):void;}//PlayState #2class PlayState implements State{	var videoWorks:VideoWorks;	public function PlayState(videoWorks:VideoWorks)	{		trace("--Play State--");		this.videoWorks = videoWorks;	}	public function startPlay(ns:NetStream, flv:String):void	{		trace("You're already playing");	}	public function stopAll(ns:NetStream):void	{		ns.close();		trace("Stop playing.");		videoWorks.setState(videoWorks.getStopState());	}	public function startRecord(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function startAppend(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function doPause(ns:NetStream):void	{		ns.togglePause();		trace("Start pausing.");		videoWorks.setState(videoWorks.getPauseState());	}}//StopState #3class StopState implements State{	var videoWorks:VideoWorks;	public function StopState(videoWorks:VideoWorks)	{		trace("--Stop State--");		this.videoWorks = videoWorks;	}	public function startPlay(ns:NetStream, flv:String):void	{		ns.play(flv);		trace("Begin playing");		videoWorks.setState(videoWorks.getPlayState());	}	public function startRecord(ns:NetStream, flv:String):void	{		ns.publish(flv, "record");		trace("Begin recording");		videoWorks.setState(videoWorks.getRecordState());	}	public function startAppend(ns:NetStream, flv:String):void	{		ns.publish(flv, "append");		trace("Begin appending");		videoWorks.setState(videoWorks.getAppendState());	}	public function stopAll(ns:NetStream):void	{		trace("You're already stopped");	}	public function doPause(ns:NetStream):void	{		trace("Must be playing to pause.");	}}//RecordState #4class RecordState implements State{	var videoWorks:VideoWorks;	public function RecordState(videoWorks:VideoWorks)	{		trace("--Record State--");		this.videoWorks = videoWorks;	}	public function startPlay(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function stopAll(ns:NetStream):void	{		ns.close();		trace("Stop recording.");		videoWorks.setState(videoWorks.getStopState());	}	public function startRecord(ns:NetStream, flv:String):void	{		trace("You're already recording");	}	public function startAppend(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function doPause(ns:NetStream):void	{		trace("Must be playing to pause.");	}}//AppendState #5class AppendState implements State{	var videoWorks:VideoWorks;	public function AppendState(videoWorks:VideoWorks)	{		trace("--Append State--");		this.videoWorks = videoWorks;	}	public function startPlay(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function stopAll(ns:NetStream):void	{		ns.close();		trace("Stop appending.");		videoWorks.setState(videoWorks.getStopState());	}	public function startRecord(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function startAppend(ns:NetStream, flv:String):void	{		trace("You're already appending");	}	public function doPause(ns:NetStream):void	{		trace("Must be playing to pause.");	}}//PauseState #6class PauseState implements State{	var videoWorks:VideoWorks;	public function PauseState(videoWorks:VideoWorks)	{		trace("--Pause State--");		this.videoWorks = videoWorks;	}	public function startPlay(ns:NetStream, flv:String):void	{		trace("You have to go to unpause");	}	public function stopAll(ns:NetStream):void	{		trace("Don't go to Stop from Pause")	}	public function startRecord(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function startAppend(ns:NetStream, flv:String):void	{		trace("You have to stop first.");	}	public function doPause(ns:NetStream):void	{		ns.togglePause();		trace("Quit pausing.");		videoWorks.setState(videoWorks.getPlayState());	}}//Video Player  #7class VideoWorks{	var playState:State;	var stopState:State;	var recordState:State;	var appendState:State;	var pauseState:State;	var state:State;	public function VideoWorks()	{		trace("Video Player is on");		playState = new PlayState(this);		stopState = new StopState(this);		recordState = new RecordState(this);		appendState = new AppendState(this);		pauseState=new PauseState(this);		state = stopState;	}	public function startPlay(ns, flv):void	{		state.startPlay(ns, flv);	}	public function startRecord(ns, flv):void	{		state.startRecord(ns, flv);	}	public function startAppend(ns, flv):void	{		state.startAppend(ns, flv);	}	public function stopAll(ns):void	{		state.stopAll(ns);	}	public function doPause(ns):void	{		state.doPause(ns);	}	public function setState(state:State):void	{		trace("A new state is set");		this.state = state;	}	public function getState():State	{		return state;	}	public function getPlayState():State	{		return this.playState;	}	public function getRecordState():State	{		return this.recordState;	}	public function getAppendState():State	{		return this.appendState;	}	public function getPauseState():State	{		return this.pauseState;	}	public function getStopState()	{		return this.stopState;	}}}