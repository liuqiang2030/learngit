package {	//Symmetric Player 2	import flash.net.NetConnection;	import flash.net.ObjectEncoding;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.NetStatusEvent;	import flash.net.SharedObject;	import flash.events.MouseEvent;	public class SymPlayer2 extends Sprite implements ISymPlayer	{		private var nc:NetConnection;		private var rtmpNow:String;		private var playerNow:String;		private var cs_so:SharedObject;		private var playerText:DynamicText;		private var showText:DynamicText;		private var oppText:DynamicText;		private var moveText:DynamicText;		private var rockBtn:MoveButton;		private var paperBtn:MoveButton;		private var scissorsBtn:MoveButton;		private var moveBtn:MoveButton;		private var connect:Connect;		private var moveVal:String;		private var p1move:String="ready";		private var p2move:String="ready";		private var rps:Referee;		private var winner:uint;		private var monitor:Array=new Array(false,false,false);		private var cl:uint;		private var mcheck:Boolean=false;		private var connected:String;		public function SymPlayer2()		{			NetConnection.defaultObjectEncoding = flash.net.ObjectEncoding.AMF0;			SharedObject.defaultObjectEncoding  = flash.net.ObjectEncoding.AMF0;			setDynamic();			setButton();			rockBtn.addEventListener(MouseEvent.CLICK, makeMove);			paperBtn.addEventListener(MouseEvent.CLICK, makeMove);			scissorsBtn.addEventListener(MouseEvent.CLICK, makeMove);			moveBtn.addEventListener(MouseEvent.CLICK, makeMove);			rtmpNow="rtmp://192.168.0.11/proxygame/";			//rtmpNow="rtmp:/proxygame/";			nc = new NetConnection();			nc.connect(rtmpNow,"player2");			nc.addEventListener(NetStatusEvent.NET_STATUS,checkHookupStatus);		}		//		//makeMove: Make Move		//		public function makeMove(event:Event):void		{			moveVal=event.currentTarget.name;			if (!monitor[1] && mcheck)			{				switch (moveVal)				{					case "scissors" :						showText.setMove("scissors");						moveText.setMove("scissors");						break;					case "rock" :						showText.setMove("rock");						moveText.setMove("rock");						break;					case "paper" :						showText.setMove("paper");						moveText.setMove("paper");						break;					case "move" :						var m:String=showText.getMove();						if (m != "ready" && m != "Error!")						{							//Proxy 2 move							doMove(m);							//Player 2 move							localMove(m);						}						else						{							showText.setMove("Error!");						}				}			}		}		//		//localMove Player Move		//		public function localMove(locMove:String):void		{			playerText.setMove("player2");			if (!monitor[1])			{				p2move=locMove;				monitor[1]=true;			}			//Check to see if both have moved			monitor[2]=(monitor[0] && monitor[1]);			if (monitor[2])			{				takeTurn();			}		}		//		//onProxyMove: Info from server		//		public function onProxyMove(proxMove:String):void		{			playerNow=proxMove.substring(proxMove.indexOf("~")+1);			proxMove=proxMove.substring(0, proxMove.indexOf("~"));			if (playerNow=="player1" && !monitor[0])			{				playerText.setMove(playerNow);				p1move=proxMove;				monitor[0]=true;			}			//Check to see if both have moved			monitor[2]=(monitor[0] && monitor[1]);			if (monitor[2])			{				takeTurn();			}		}				//		//doMove: Call server		//		public function doMove(m:String):void		{			nc.call("makeMove",null,m);		}		//		//takeTurn Complete the turn		//		public function takeTurn():void		{			rps=new RPS();			rps.moveComplete(p1move,p2move,playerText,monitor);			rps.displayResults(oppText,p1move);			showText.setMove("ready");		}		//Get number connected from server		public function numConnect(cl:uint):void		{			if (cl==2)			{				mcheck=true;			}			else			{				mcheck=false;			}			connected=String(cl+ " connected");			playerText.setMove(connected);		}		//		//Connect Check and Set Up Shared Objects		//		public function checkHookupStatus(event:NetStatusEvent):void		{			if (event.info.code == "NetConnection.Connect.Success")			{				connect.gotoAndStop(2);				cs_so=SharedObject.getRemote("proxmove",nc.uri,false);				cs_so.client=this;				cs_so.connect(nc);				nc.call("checkPlayNum",null,null);			}		}				//Text		public function setDynamic():void		{			playerText=new DynamicText();			addChild(playerText);			playerText.x=180;			playerText.y=50;			showText=new DynamicText();			addChild(showText);			showText.x=260;			showText.y=50;			showText.setMove("ready");			moveText=new DynamicText();			addChild(moveText);			moveText.x=180;			moveText.y=140;			oppText=new DynamicText();			addChild(oppText);			oppText.x=100;			oppText.y=140;			oppText.setMove("opponent");		}		//Buttons		public function setButton():void		{			moveBtn=new MoveButton("Make Move",0xcccccc);			moveBtn.name="move";			addChild(moveBtn);			moveBtn.x=100;			moveBtn.y=50;			rockBtn=new MoveButton("Rock",0xcccccc);			rockBtn.name="rock";			addChild(rockBtn);			rockBtn.x=100;			rockBtn.y=80;			paperBtn=new MoveButton("Paper",0xcccccc);			paperBtn.name="paper";			addChild(paperBtn);			paperBtn.x=150;			paperBtn.y=80;			scissorsBtn=new MoveButton("Scissors",0xcccccc);			scissorsBtn.name="scissors";			addChild(scissorsBtn);			scissorsBtn.x=200;			scissorsBtn.y=80;			connect=new Connect();			addChild(connect);			connect.x=175;			connect.y=250;		}	}}